# PSEUDOKOD f√∂r mig sj√§lv
# Beh√∂ver n√•gonstans att lagra fr√•gorna i - Typ en class och en lista - Psykologi class och en lista med fr√•gorna
# Beh√∂ver kunna h√•lla koll p√• po√§ngen - Typ genom en variabel self.score
# Beh√∂ver kunna slumpa vilken ordning fr√•gorna kommer - Typ en funktion

# import fr√•n pythons egna bibliotek f√∂r att kunna slumpa fr√•gorna senare
import random

# Har skapat en class och 2 variabler f√∂r att komma ig√•ng.
class Psychology:
    def __init__(self):
        self.score = 0
        self.total_questions = 0
        
        # Gjorde en lista f√∂r alla fr√•gor
        self.questions = [
            "Vilka delar av m√§nniskan menade Freud att samh√§llet f√∂rtrycker?",
            "N√§r man f√∂rs√∂ker sluta med missbruk av alkohol eller porr √§r ett vanligt abstinenssymptom att man k√§nner vad√•?",
            "Varf√∂r √§r slotmaskiner s√§rskilt beroendeframkallande?",
            "Vad beskriver begreppet kognitiv dissonans?",
            "Vilken strategi fungerar b√§st enligt inl√§rningspsykologi f√∂r att f√• barn att uppr√§tth√•lla st√§dning av sitt rum?",
            "Varf√∂r aktiveras amygdalan vid en muntlig presentation inf√∂r andra?",
            "Hur menade Piaget att moral utvecklas hos barn?",
            "I vilket land v√§xer m√•nga barn upp med undvikande anknytnings strategi?",
            "Vem populariserade psykologiska f√∂rsvarsmekanismer som projicering och borttr√§ngning?",
            "Vilken behandling har b√§st bevisat st√∂d mot oro och √§ltande tankar?"
        ]

        # Och en separat lista f√∂r alla svarsalternativ
        self.options = [
            # Freud ‚Äì inre konflikt
            ["Hungerk√§nslor", "Sj√§lvbilder", "Sexualitet och aggressivitet", "Dr√∂mmar"],
            # Alkohol och Porr beroende
            ["S√∂tsug", "Rastl√∂shet", "Huvudv√§rk", "√Öngest"],
            # Slotmaskiner ‚Äì beroende
            ["Las Vegas har funnits i √∂ver 100 √•r", "De anv√§nder h√∂gre insatser √§n andra spel", 
             "N√§r man trycker p√• knappen frig√∂rs automatiskt dopamin", "Maskinen ger bel√∂ningar utifr√•n slumpm√§ssiga intervaller"],
            # Kognitiv dissonans
            ["Konflikt mellan tankar och handlingar", "Att inte kunna tolka sensorisk information", 
             "Att gl√∂mma minnen efter trauma", "Konflikt mellan olika k√§nslor samtidigt"],
            # Inl√§rningspsykologi ‚Äì barns st√§dvanor
            ["Bel√∂na med veckopeng n√§r de st√§dar", "Bestraffa med uteg√•ngsf√∂rbud om de inte st√§dar", 
             "Att d√• och d√• ge uppskattning f√∂r att barnet st√§dade", "St√§da rummet sj√§lv och hoppas barnet hj√§lper"],
            # Amygdalan ‚Äì stress
            ["Den tolkar situationen som ett hot", "Den styr aptiten och g√∂r en hungrig", 
             "Den triggar nostalgiska minnen", "Den aktiverar kreativt t√§nkande"],
            # Utvecklingspsykologi ‚Äì moral
            ["Genom imitering av vuxnas beteenden", "Genom genetiska faktorer", 
             "Genom religi√∂s undervisning", "Genom interaktion och samspel med andra s√• som lek"],
            # Anknytningsteori
            ["Japan", "Israel", "Tyskland", "USA"],
            # Anna Freud ‚Äì f√∂rsvarsmekanismer
            ["Anna Freud", "Astrid Lindgren", "Jonas Gardell", "Carl Rogers"],
            # √Ñltande tankar
            ["Samtalsterapi", "KBT", "Hypnos", "Psykadeliska droger"]
        ]
 
        # Och sen en tredje lista med de r√§tta svaren utifr√•n deras index position i listan
        self.answers = [
            2,  # Freud: Sexualitet och aggressivitet
            3,  # Alkohol/porr: √Öngest
            3,  # Slotmaskiner: Slumpm√§ssiga intervaller
            0,  # Kognitiv dissonans: Konflikt mellan tankar och handlingar
            2,  # St√§dvanor: Ge uppskattning ibland
            0,  # Amygdala: Hot
            3,  # Piaget: Samspel/lek
            2,  # Anknytning: Tyskland
            0,  # F√∂rsvarsmekanismer: Anna Freud
            1   # √Ñltande: KBT
        ]

        # Ledtr√•dar
        self.hints = [
            "Handlar om de mest grundl√§ggande m√§nskliga‚Ä¶",
            "K√§nsligt obehag inte fysiskt",
            "Fundera p√• vad som h√§nder n√§r bel√∂ningar kommer oregelbundet.",
            "Vad √§r det som inte st√§mmer √∂verens?",
            "Hur skulle du sj√§lv velat bli bem√∂tt?",
            "Stressp√•slag",
            "Vad g√∂r barn helst?",
            "Ett land k√§nt f√∂r ansvar och sj√§lvst√§ndighet",
            "Barnet till‚Ä¶",
            "Den mest evidensbaserad terapimetoden"
        ]

    # Slumpar fram ett index mellan 0 och antalet fr√•gor - 1 s√• att jag kan h√§mta en slumpm√§ssig fr√•ga ur listan
    def get_random_index(self):
        return random.randint(0, len(self.questions) - 1)

    # Beh√∂ver en funktion f√∂r att st√§lla en fr√•ga som g√•r att √•teranv√§nda flera g√•nger
    def ask_question(self, index):
        print("\n" + self.questions[index])

        # F√∂r att kunna visa alternativen till fr√•gan med en sifferkoppling
        for i, option in enumerate(self.options[index]):
            print(f"{i}: {option}")

        # F√∂r att anv√§ndaren ska kunna skriva in ett svar eller be om ledtr√•d
        user_input = input("Skriv ditt svar (0-3), eller 'ledtr√•d' f√∂r tips: ")

        # Vill att anv√§ndaren ska kunna skriva nytt svar efter att ha f√•tt ledtr√•d och att det inte blir problem med bokst√§verna
        if user_input.lower() == "ledtr√•d":   # Anv√§ndaren ber om ledtr√•d
            print("üí° Ledtr√•d:", self.hints[index])
            user_input = input("Skriv ditt svar (0-3): ")

        # Vill inte att koden crashar om n√•gon skriver in en bokstav ist√§llet f√∂r siffra
        if user_input.isdigit():
            answer = int(user_input)

            # F√∂r att h√•lla koll p√• antal fr√•gor
            self.total_questions += 1

            # Beh√∂ver kunna kolla om anv√§ndarens siffra matchar r√§tt svar
            if answer == self.answers[index]:
                print("‚úÖ R√§tt svar!")
                self.score += 1
            else:
                print("‚ùå Fel svar.")
        else:
            print("‚ö†Ô∏è Ogiltig input ‚Äì ingen po√§ng.")

# F√∂r att kunna testa min kod sj√§lv utan att det blir problem n√§r psykolog-fr√•gor.py filen importeras till main.py
if __name__ == "__main__":
    quiz = Psychology()
    index = quiz.get_random_index()
    quiz.ask_question(index)


# Beh√∂ver sen l√§gga till variables med olika datatypes
# Beh√∂ver √§ven functions/methods - Hur s√§tter jag upp dessa?
# Beh√∂ver √§ven n√•n form av conditions (if(elif/else) och ev loop

